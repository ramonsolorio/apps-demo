name: Deploy Logic App and Rule Engine

on:
  push:
    branches:
      - develop
      - staging
      - main
  workflow_dispatch:

env:
  DOTNET_VERSION: "8.0.x"
  LOGIC_APP_PATH: "src/WF_PRM_PromoWorkspace/LogicApp"
  RULE_ENGINE_PROJECT_PATH: "src/WF_PRM_PromoWorkspace/Function"
  RULE_ENGINE_PROJECT_FILE: "WF_PRM_PromoFunction.csproj"
  AZURE_FUNCTIONAPP_PACKAGE_PATH: "./publish"
  LOGIC_APP_NAME: ${{ vars.LOGIC_APP_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'qa' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set Logic App Name
        run: |
          echo "ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'qa' || 'development' }}"  
          echo "LOGIC_APP_NAME: ${{ vars.LOGIC_APP_NAME }}"  
          echo "LOGIC_APP_PUBLISH_PROFILE: ${{ secrets.LOGIC_APP_PUBLISH_PROFILE }}"  
          echo "DOTNET_VERSION: ${{ env.DOTNET_VERSION }}"  
          echo "LOGIC_APP_PATH: ${{ env.LOGIC_APP_PATH }}"  
          echo "RULE_ENGINE_PROJECT_PATH: ${{ env.RULE_ENGINE_PROJECT_PATH }}"  
          echo "RULE_ENGINE_PROJECT_FILE: ${{ env.RULE_ENGINE_PROJECT_FILE }}"  
          echo "AZURE_FUNCTIONAPP_PACKAGE_PATH: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}"

      - name: Install dependencies for Rule Engine
        run: dotnet restore ${{ env.RULE_ENGINE_PROJECT_PATH }}/${{ env.RULE_ENGINE_PROJECT_FILE }}

      - name: Build Rule Engine
        run: dotnet build ${{ env.RULE_ENGINE_PROJECT_PATH }}/${{ env.RULE_ENGINE_PROJECT_FILE }} --configuration Release

      - name: Publish Rule Engine
        run: dotnet publish ${{ env.RULE_ENGINE_PROJECT_PATH }}/${{ env.RULE_ENGINE_PROJECT_FILE }} --configuration Release --output ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

      # Uncomment and configure the following step if you want to deploy the Rule Engine to Azure Function App
      # - name: Deploy Rule Engine to Azure Function App
      #   uses: Azure/functions-action@v1
      #   with:
      #     app-name: ${{ secrets.RULE_FUNCTION_APP_NAME }}
      #     package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
      #     publish-profile: ${{ secrets.RULE_FUNCTION_APP_PUBLISH_PROFILE }}

      #- name: Deploy Logic App definition
      #  uses: Azure/webapps-deploy@v2
      #  with:
      #    app-name: ${{ vars.LOGIC_APP_NAME }}
      #    package: ${{ env.LOGIC_APP_PATH }}
      #    publish-profile: ${{ secrets.LOGIC_APP_PUBLISH_PROFILE }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Update Workflow URL
        run: |
          # Get subscription from current context 
          subscription=$(az account show --query id -o tsv)          
          resourceGroupName='${{ vars.RESOURCE_GROUP_NAME }}' 
          logicAppName='${{ vars.LOGIC_APP_NAME }}'          
          workflowName='WF_PRM_AckNotification' 
          keyvaultName=${{ vars.KEYVAULT_NAME }}
          keyvaultSecretName='WF-PRM-AckNotification-URL'

          uri="https://management.azure.com/subscriptions/$subscription/resourceGroups/$resourceGroupName/providers/Microsoft.Web/sites/$logicAppName/hostruntime/runtime/webhooks/workflow/api/management/workflows/$workflowName/triggers/When_a_HTTP_request_is_received/listCallbackUrl?api-version=2018-11-01"

          echo subscription=$subscription
          echo resourceGroupName=$resourceGroupName
          echo uri=$uri
          echo workflowName=$workflowName
          
          callbackURL=$(az rest --method post --uri $uri | jq -r '.value')

          echo "Callback URL: $callbackURL"

          #Retreive the secret from keyvault and save in a variable to validate if exists
          currentSecretValue=$(az keyvault secret show --vault-name $keyvaultName --name $keyvaultSecretName --query value -o tsv)
          if [ -z "$currentSecretValue" ] || [ "$currentSecretValue" != "$callbackURL" ]; then
            echo "Setting secret $keyvaultSecretName in keyvault $keyvaultName"
            az keyvault secret set --vault-name $keyvaultName --name $keyvaultSecretName --value "$callbackURL"
          else
            echo "Secret $keyvaultSecretName in keyvault $keyvaultName is up to date"
          fi

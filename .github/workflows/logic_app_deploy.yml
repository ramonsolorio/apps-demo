name: Deploy Logic App and Rule Engine

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - develop
      - staging
      - main
  workflow_dispatch:

env:
  DOTNET_VERSION: "8.0.x"
  LOGIC_APP_PATH: "src/WF_PRM_PromoWorkspace/LogicApp"
  RULE_ENGINE_PROJECT_PATH: "src/WF_PRM_PromoWorkspace/Function"
  RULE_ENGINE_PROJECT_FILE: "WF_PRM_PromoFunction.csproj"
  AZURE_FUNCTIONAPP_PACKAGE_PATH: "./publish"
  LOGIC_APP_NAME: ${{ vars.LOGIC_APP_NAME }}
  CMD_PREFIX: "/opt/mssql-tools18/bin"

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'qa' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      #      - name: Insert Data into Azure SQL
      #        uses: azure/sql-action@v2.3
      #        with:
      #          connection-string: >
      #            Server=tcp:${{ vars.AZURE_SQL_SERVER }},1433;
      #            Initial Catalog=${{ vars.AZURE_SQL_DB }};
      #            Authentication=Active Directory Service Principal;
      #            User ID=${{ secrets.AZURE_CLIENT_ID }}
      #            Encrypt=True;
      #            TrustServerCertificate=False;
      #          #client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      #          sql-query : "SELECT 1;"
      #          #sql-file: ./insert.sql
      #          #Server=<servername>;Initial Catalog=<database>;Authentication=Active Directory Service Principal; User ID=<user_id>; Password=<password>; Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;

      - name: Install SQLCMD
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list

          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18 unixodbc-dev

          ls /opt
          echo ====
          ls /opt/mssql-tools18/bin
          echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bash_profile
          source ~/.bash_profile

      - name: Get Access Token for Azure SQL
        run: |
          ACCESS_TOKEN=$(az account get-access-token --resource https://database.windows.net --output tsv | cut -f 1 | tr -d '\n' | iconv -f ascii -t UTF-16LE)
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Insert Data into Database
        run: |
          /opt/mssql-tools18/bin/sqlcmd -S ${{ vars.AZURE_SQL_SERVER }} -d ${{ vars.AZURE_SQL_DB }} \
          -G \
          -Q "SELECT 1;"

          sqlcmd -S "$SERVER" -U "$USERNAME" -d "$DATABASE" 

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set Logic App Name
        run: |
          echo "ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'qa' || 'development' }}"  
          echo "LOGIC_APP_NAME: ${{ vars.LOGIC_APP_NAME }}"  
          echo "LOGIC_APP_PUBLISH_PROFILE: ${{ secrets.LOGIC_APP_PUBLISH_PROFILE }}"  
          echo "DOTNET_VERSION: ${{ env.DOTNET_VERSION }}"  
          echo "LOGIC_APP_PATH: ${{ env.LOGIC_APP_PATH }}"  
          echo "RULE_ENGINE_PROJECT_PATH: ${{ env.RULE_ENGINE_PROJECT_PATH }}"  
          echo "RULE_ENGINE_PROJECT_FILE: ${{ env.RULE_ENGINE_PROJECT_FILE }}"  
          echo "AZURE_FUNCTIONAPP_PACKAGE_PATH: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}"

      - name: Install dependencies for Rule Engine
        run: dotnet restore ${{ env.RULE_ENGINE_PROJECT_PATH }}/${{ env.RULE_ENGINE_PROJECT_FILE }}

      - name: Build Rule Engine
        run: dotnet build ${{ env.RULE_ENGINE_PROJECT_PATH }}/${{ env.RULE_ENGINE_PROJECT_FILE }} --configuration Release

      - name: Publish Rule Engine
        run: dotnet publish ${{ env.RULE_ENGINE_PROJECT_PATH }}/${{ env.RULE_ENGINE_PROJECT_FILE }} --configuration Release --output ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

      # Uncomment and configure the following step if you want to deploy the Rule Engine to Azure Function App
      # - name: Deploy Rule Engine to Azure Function App
      #   uses: Azure/functions-action@v1
      #   with:
      #     app-name: ${{ secrets.RULE_FUNCTION_APP_NAME }}
      #     package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
      #     publish-profile: ${{ secrets.RULE_FUNCTION_APP_PUBLISH_PROFILE }}

      - name: Deploy Logic App definition
        uses: Azure/webapps-deploy@v3
        with:
          app-name: ${{ vars.LOGIC_APP_NAME }}
          package: ${{ env.LOGIC_APP_PATH }}
          #publish-profile: ${{ secrets.LOGIC_APP_PUBLISH_PROFILE }}

      - name: Update Workflow URLs
        run: |
          subscription='${{ secrets.AZURE_SUBSCRIPTION_ID }}'  
          resourceGroupName='${{ vars.RESOURCE_GROUP_NAME }}'  
          logicAppName='${{ vars.LOGIC_APP_NAME }}'  
          keyvaultName=${{ vars.KEYVAULT_NAME }}'  
            
          # Lista de workflows y sus respectivos nombres de secretos en el KeyVault  
          declare -A workflows  
          workflows=(  
            ["WF_PRM_AckNotification"]="WF-PRM-AckNotification-URL"  
            ["WF_PRM_AnotherWorkflow"]="WF-PRM-AnotherWorkflow-URL"  
            # Agregar más workflows y nombres de secretos según sea necesario  
          )  

          for workflowName in "${!workflows[@]}"; do  
            keyvaultSecretName=${workflows[$workflowName]}  
            uri="https://management.azure.com/subscriptions/$subscription/resourceGroups/$resourceGroupName/providers/Microsoft.Web/sites/$logicAppName/hostruntime/runtime/webhooks/workflow/api/management/workflows/$workflowName/triggers/When_a_HTTP_request_is_received/listCallbackUrl?api-version=2018-11-01"  
            callbackURL=$(az rest --method post --uri $uri | jq -r '.value')  

            # Retreive the secret from keyvault and save in a variable to validate if exists  
            currentSecretValue=$(az keyvault secret show --vault-name $keyvaultName --name $keyvaultSecretName --query value -o tsv)  
            if [ -z "$currentSecretValue" ] || [ "$currentSecretValue" != "$callbackURL" ]; then  
              echo "Setting secret $keyvaultSecretName in keyvault $keyvaultName"  
              az keyvault secret set --vault-name $keyvaultName --name $keyvaultSecretName --value "$callbackURL"  
            else  
              echo "Secret $keyvaultSecretName in keyvault $keyvaultName is up to date"  
            fi  
          done
